import { StatusBar } from 'expo-status-bar';
import { StyleSheet, TextInput, ImageBackground, View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { useEffect, useState } from 'react'
import JsonData from '../files.json'


const isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {
    const paddingToBottom = 1500;
    return layoutMeasurement.height + contentOffset.y >=
        contentSize.height - paddingToBottom;
};

export default function App() {
    const [JData, setJData] = useState([]);
    const [searchTerm, setSearchTerm] = useState([{ termValue: "", status: "" }])
    const [counter, setCounter] = useState([{ from: 0, upto: 40 }]);
    const [Loading, setLoading] = useState(false);
    const [filtered, setFiltered] = useState([]);
    const letterTranslation = (letter) => {
        let nL = null

        if (letter == '·çê') { return '·å∞' }
        if (letter == '·çë') { return '·å±' }
        if (letter == '·çí') { return '·å≤' }
        if (letter == '·çì') { return '·å≥' }
        if (letter == '·çî') { return '·å¥' }
        if (letter == '·çï') { return '·åµ' }
        if (letter == '·çñ') { return '·å∂' }

        if (letter == '·å∞') { return '·çê' }
        if (letter == '·å±') { return '·çë' }
        if (letter == '·å≤') { return '·çí' }
        if (letter == '·å≥') { return '·çì' }
        if (letter == '·å¥') { return '·çî' }
        if (letter == '·åµ') { return '·çï' }
        if (letter == '·å∂') { return '·çñ' }

        if (letter == '·àÄ') { return '·àê' }
        if (letter == '·àÅ') { return '·àë' }
        if (letter == '·àÇ') { return '·àí' }
        if (letter == '·àÉ') { return '·àì' }
        if (letter == '·àÑ') { return '·àî' }
        if (letter == '·àÖ') { return '·àï' }
        if (letter == '·àÜ') { return '·àñ' }

        if (letter == '·àê') { return '·àÄ' }
        if (letter == '·àë') { return '·àÅ' }
        if (letter == '·àí') { return '·àÇ' }
        if (letter == '·àì') { return '·àÉ' }
        if (letter == '·àî') { return '·àÑ' }
        if (letter == '·àï') { return '·àÖ' }
        if (letter == '·àñ') { return '·àÜ' }

        if (letter == '·ãê') { return '·ä†' }
        if (letter == '·ãë') { return '·ä°' }
        if (letter == '·ãí') { return '·ä¢' }
        if (letter == '·ãì') { return '·ä£' }
        if (letter == '·ãî') { return '·ä§' }
        if (letter == '·ãï') { return '·ä•' }
        if (letter == '·ãñ') { return '·ä¶' }

        if (letter == '·ä†') { return '·ãê' }
        if (letter == '·ä°') { return '·ãë' }
        if (letter == '·ä¢') { return '·ãí' }
        if (letter == '·ä£') { return '·ãì' }
        if (letter == '·ä§') { return '·ãî' }
        if (letter == '·ä•') { return '·ãï' }
        if (letter == '·ä¶') { return '·ãñ' }

        if (letter == '·à†') { return '·à∞' }
        if (letter == '·à°') { return '·à±' }
        if (letter == '·à¢') { return '·à≤' }
        if (letter == '·à£') { return '·à≥' }
        if (letter == '·à§') { return '·à¥' }
        if (letter == '·à•') { return '·àµ' }
        if (letter == '·à¶') { return '·à∂' }

        if (letter == '·à∞') { return '·à†' }
        if (letter == '·à±') { return '·à°' }
        if (letter == '·à≤') { return '·à¢' }
        if (letter == '·à≥') { return '·à£' }
        if (letter == '·à¥') { return '·à§' }
        if (letter == '·àµ') { return '·à•' }
        if (letter == '·à∂') { return '·à¶' } else { nL = letter }

        return nL;
    }

    const conversion = () => {
        let newWord = ""
        let Words = searchTerm[0].termValue;
        for (let i = 0; i < Words.length; i++) {
            newWord = newWord.concat(letterTranslation(Words[i]));
        }
        return newWord;
    }

    useEffect(() => {
        setJData(JsonData)
        const filtered = JData.filter((Dic) => {
            if (searchTerm[0].termValue == "") {
                if (Dic.id > counter[0].from && Dic.id < counter[0].upto) {
                    return Dic;
                }
            }
            else if ((Dic.geez.includes(searchTerm[0].termValue) || Dic.geez.includes(conversion())) && searchTerm[0].status == "geez") {
                return Dic;
            }
            else if ((Dic.amharic.includes(searchTerm[0].termValue) || Dic.amharic.includes(conversion())) && searchTerm[0].status == "am") {
                return Dic;
            }
        })
        setFiltered(filtered)
        setLoading(false)
    }, [counter, searchTerm, JData]);


    return (
        <View style={styles.container} >
            <View>
                <ImageBackground style={styleSearch.imageBackgrounds} source={require('../../assets/scott-webb-arfGMDKir1w-unsplash.jpg')} resizeMode="cover">
                    <TextInput
                        style={styleSearch.Search1}
                        onChangeText={(newText) => {
                            setLoading(true)
                            setSearchTerm([{ termValue: newText, status: "am" }])
                            setCounter([{ from: 0, upto: 20 }])
                        }}
                        placeholder="·ä®·ä†·àõ·à≠·äõ ·ãà·ã∞ ·åç·ãï·ãù"
                        keyboardType="default"
                    />
                    <TextInput
                        style={styleSearch.Search2}
                        onChangeText={(newText) => {
                            setLoading(true)
                            setSearchTerm([{ termValue: newText, status: "geez" }])
                            setCounter([{ from: 0, upto: 20 }])
                        }
                        }
                        placeholder="·ä®·åç·ãï·ãù ·ãà·ã∞ ·ä†·àõ·à≠·äõ"
                        keyboardType="default"
                    />
                </ImageBackground>
            </View>


            <ScrollView
                onScroll={({ nativeEvent }) => {
                    if (isCloseToBottom(nativeEvent)) {
                        const newState = [{ from: 0, upto: counter[0].upto + 20 }];
                        setCounter(newState);
                    }
                }}
            >

                {Loading ? <Text style={styles.LoadingStyle}>Loading ...</Text> :
                    <>
                        {filtered.length === 0 ?
                            <View>
                                <Text style={styles.noData}>
                                    <Text style={styles.noDataSpan}>
                                        {searchTerm[0].termValue}</Text>
                                    {"\n"}·âÉ·àã·â± ·ä†·àç·â∞·åà·äò·àù
                                </Text>
                            </View> :
                            filtered.slice(0, counter[0].upto).map((Dic) => {
                                return (
                                    <TouchableOpacity>
                                        <View key={Dic.id} style={styles.oneTranslation} >
                                            <View style={styles.oneTranslationLeft}>
                                                <Text style={styles.amharicTranslation}>
                                                    {Dic.amharic}
                                                </Text>
                                                <Text style={styles.geezTranslation}>
                                                    {Dic.geez}
                                                </Text>
                                            </View>
                                            <View style={styles.oneTranslationRight}>
                                                <Text style={styles.loveEmoji}>üïó</Text>
                                            </View>
                                        </View>
                                    </TouchableOpacity>
                                )
                            })}
                    </>
                }
            </ScrollView >
            <StatusBar style="light" backgroundColor="tomato" />
        </View >
    );
}

// styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#eee',
        flexDirection: "column",
        justifyContent: "space-between"
    },
    oneTranslation: {
        flex: 1,
        backgroundColor: 'white',
        margin: 0.4,
        padding: 8,
        flexDirection: "row",
        justifyContent: 'center',
    },
    oneTranslationLeft: {
        flex: 5,
    },
    oneTranslationRight: {
        flex: 1,
        alignItems: 'center',
        justifyContent: "center",
    },
    loveEmoji: {
        flex: 1,
        fontSize: 16,
        padding: 10,
        backgroundColor: 'transparent',
    },
    amharicTranslation: {
        color: '#d00000',
        fontSize: 18,
        paddingLeft: 10,
    },
    geezTranslation: {
        fontSize: 16,
        paddingLeft: 10,
        color: "black"
    },
    LoadingStyle: {
        textAlign: "center",
        justifyContent: "center",
        color: "blue",
        fontSize: 30
    },
    noData: {
        alignItems: "center",
        justifyContent: 'center',
        backgroundColor: "white",
        padding: 20,
        fontWeight: "bold",
        marginTop: 20,
        textAlign: "center",
        fontSize: 15,
    },
    noDataSpan: {
        color: "red",
    }
});

const styleSearch = StyleSheet.create({
    imageBackgrounds: {
        height: 180,
        width: "100%",
        alignItems: 'center',
        flexDirection: 'row',
        justifyContent: "flex-end",
    },
    Search1: {
        flex: 1,
        backgroundColor: "#ffffffbb",
        width: "auto",
        paddingTop: 8,
        paddingBottom: 8,
        paddingRight: 10,
        paddingLeft: 8,
        fontSize: 18,
        margin: 0.3,
        marginLeft: 5,
        textAlign: 'center',
        borderTopLeftRadius: 99,
        borderBottomLeftRadius: 99,
    },
    Search2: {
        flex: 1,
        backgroundColor: "#ffffffaa",
        width: "auto",
        paddingTop: 8,
        paddingBottom: 8,
        paddingRight: 10,
        paddingLeft: 8,
        fontSize: 18,
        margin: 0.3,
        marginRight: 5,
        textAlign: 'center',
        borderTopRightRadius: 49,
        borderBottomRightRadius: 49,
    },
})
